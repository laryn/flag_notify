<?php

/**
 * @file
 * Functions for this module.
 */

/**
 * Load the necessary include files.
 */
module_load_include('inc', 'flag_notify', 'flag_notify_settings');

/**
 * Implements hook_config_info().
 */
function flag_notify_config_info() {
  $prefixes['flag_notify.settings'] = array(
    'label' => t('Flag Notify settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_permission().
 *
 * @return array
 *   An array of valid permissions for the flag_notify module.
 */
function flag_notify_permission() {
  return array(
    'administer flag notify' => array(
      'title' => t('Administer Flag Notify'),
      'description' => t('Set roles that may access the Flag Notify settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * @return array
 *   An array with this module's settings.
 */
function flag_notify_menu() {
  $items = array();

  $items['admin/config/system/flag_notify'] = array(
    'title' => 'Flag Notify',
    'description' => 'Configure Flag Notify module',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('flag_notify_admin'),
    'access arguments' => array('administer flag notify'),
    'weight' => 0,
  );

  // For the default local task, we need very little configuration, as the
  // callback and other conditions are handled by the parent callback.
  $items['admin/config/system/flag_notify/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  // Email templates for notifications.
  $items['admin/config/system/flag_notify/emails'] = array(
    'title' => 'Emails',
    'description' => 'Configure email templates',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('flag_notify_email_templates'),
    'access arguments' => array('administer flag notify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  // A shortcut to the permissions settings for this module.
  $items['admin/config/system/flag_notify/permissions'] = array(
    'title' => 'Permissions',
    'description' => 'Configure access permissions',
    'page callback' => 'flag_notify_perms_callback',
    'access arguments' => array('administer flag notify'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  return $items;
}

/**
 * Redirect to the module's permission settings.
 *
 * A callback from flag_notify_menu(), not a hook.
 */
function flag_notify_perms_callback() {
  backdrop_goto('admin/config/people/permissions', array('fragment' => 'module-flag_notify'));
}

/**
 * Implements hook_field_access().
 */
function flag_notify_field_access($op, $field, $entity_type, $entity, $account) {
  if ($field['field_name'] == 'flag_notify_field_defaults' && $op == 'view') {
    if ($entity->uid == $account->uid) {
      // View only own values for this field.
      return TRUE;
    }
    return FALSE;
  }
  return TRUE;
}


// ****************** logic of the module starts here *************************

/**
 * Implements hook_comment_publish().
 */
function flag_notify_comment_publish($comment) {
  $config = config('flag_notify.settings');
  $use_default_events = $config->get('use_default_events');
  if (!$use_default_events) {
    return;
  }
  $user = user_load($comment->uid);
  $node = node_load($comment->nid);

  $groups = array();
  if (module_exists('og')) {
    $group_ids = og_get_entity_groups('node', $node);
  }
  if (isset($group_ids['node'])) {
    // Getting only node groups.
    foreach ($group_ids['node'] as $group_id) {
      $group = node_load($group_id);
      $groups[] = $group;
    }
  }
  // Fire notification.
  flag_notify_main('new_comment', $groups, $node, $comment, $user);

  // Flag user to follow their own comment if selected.
  $user_default_options = field_get_items('user', $user, 'flag_notify_field_defaults');
  $comment_subscription = $config->get('comment_subscription');
  if ($user_default_options) {
    foreach ($user_default_options as $option) {
      if ($option['value'] == 'comment' && $comment_subscription) {
        $flag = flag_get_flag($comment_subscription);
        $flag->flag('flag', $comment->cid, $user);
        break;
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function flag_notify_node_insert($node) {
  $config = config('flag_notify.settings');
  $use_default_events = $config->get('use_default_events');
  if (!$use_default_events) {
    return;
  }
  if ($node->status == 1) {
    $user = user_load($node->uid);
    $groups = array();
    if (module_exists('og')) {
      $group_ids = og_get_entity_groups('node', $node);
    }
    if (isset($group_ids['node'])) {
      // Getting only node groups.
      foreach ($group_ids['node'] as $group_id) {
        $group = node_load($group_id);
        $groups[] = $group;
      }
    }
    // Fire notification.
    flag_notify_main('new_content', $groups, $node, NULL, $user);

    // Flag user to follow its own node if that's in its options.
    $user_default_options = field_get_items('user', $user, 'flag_notify_field_defaults');
    $content_subscription = $config->get('content_subscription');
    if ($user_default_options) {
      foreach ($user_default_options as $option) {
        if ($option['value'] == 'content' && $content_subscription) {
          $flag = flag_get_flag($content_subscription);
          $flag->flag('flag', $node->nid, $user);
          break;
        }
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function flag_notify_node_update($node) {
  $config = config('flag_notify.settings');
  $use_default_events = $config->get('use_default_events');
  if (!$use_default_events) {
    return;
  }
  $old_node = $node->original;
  entity_get_controller('node')->resetCache(array($node->nid));
  if ($node->status == 1) {
    $groups = array();
    if (module_exists('og')) {
      $group_ids = og_get_entity_groups('node', $node);
    }
    if (isset($group_ids['node'])) {
      // Getting only node groups.
      foreach ($group_ids['node'] as $group_id) {
        $group = node_load($group_id);
        $groups[] = $group;
      }
    }
    if ($old_node->status == 0) {
      // I treat this as an insert.
      $user = user_load($node->uid);
      // Fire notifications.
      flag_notify_main('new_content', $groups, $node, NULL, $user);

      // Flag user to follow its own node if that's in its options.
      $user_default_options = field_get_items('user', $user, 'flag_notify_field_defaults');
      $content_subscription = $config->get('content_subscription');
      if ($user_default_options) {
        foreach ($user_default_options as $option) {
          if ($option['value'] == 'content' && $content_subscription) {
            $flag = flag_get_flag($content_subscription);
            $flag->flag('flag', $node->nid, $user);
            break;
          }
        }
      }
    }
    else {
      // Definitivelly an update.
      $account = $GLOBALS['user'];
      // Fire notifications.
      flag_notify_main('edited_content', $groups, $node, NULL, $account);
    }
  }
}

/**
 * Implements hook_og_membership_insert().
 */
function flag_notify_og_membership_insert(OgMembership $og_membership) {
  $config = config('flag_notify.settings');
  $use_default_events = $config->get('use_default_events');
  if (!$use_default_events) {
    return;
  }

  if ($og_membership->entity_type != 'user') {
    // We want deal only with new users here, no content attached to a group.
    return;
  }
  if ($og_membership->state != '1') {
    // This new user still need approval, doing nothing.
    return;
  }
  $groups = array();
  $account = user_load($og_membership->etid);
  $group = node_load($og_membership->gid);
  $groups[] = $group;
  // Fire notifications.
  flag_notify_main('new_user', $groups, NULL, NULL, $account);
  // Flag user to follow the group activity it just joined if that's in its
  // options.
  $user_default_options = field_get_items('user', $account, 'flag_notify_field_defaults');
  $group_subscription = $config->get('group_subscription');
  if ($user_default_options) {
    foreach ($user_default_options as $option) {
      if ($option['value'] == 'group' && $group_subscription) {
        $flag = flag_get_flag($group_subscription);
        $flag->flag('flag', $group->nid, $account);
        break;
      }
    }
  }
}

/**
 * Implements hook_og_membership_update().
 */
function flag_notify_og_membership_update(OgMembership $og_membership) {
  $config = config('flag_notify.settings');
  $use_default_events = $config->get('use_default_events');
  if ($og_membership->entity_type != 'user') {
    // We want deal only with new users here, no content attached to a group.
    return;
  }

  $old_membership = $og_membership->original;
  if ($old_membership->state != "1" && $og_membership->state == "1" && $use_default_events) {
    // It's an approval.
    $groups = array();
    $account = user_load($og_membership->etid);
    $group = node_load($og_membership->gid);
    $groups[] = $group;
    // Fire notifications.
    flag_notify_main('new_user', $groups, NULL, NULL, $account);
    // Glag user to follow the group activity it just joined if that's in its
    // options.
    $user_default_options = field_get_items('user', $account, 'flag_notify_field_defaults');
    $group_subscription = $config->get('group_subscription');
    if ($user_default_options) {
      foreach ($user_default_options as $option) {
        if ($option['value'] == 'group' && $group_subscription) {
          $flag = flag_get_flag($group_subscription);
          $flag->flag('flag', $group->nid, $account);
          break;
        }
      }
    }
  }
  elseif ($old_membership->state == "1" && $og_membership->state != "1") {
    // It's banned/blocked, let's remove also notifications.
    // TODO: remove notification only for private groups.
    $account = user_load($og_membership->etid);
    $group = node_load($og_membership->gid);
    $group_subscription = $config->get('group_subscription');
    if ($group_subscription) {
      $flag = flag_get_flag($group_subscription);
      $flag->flag('unflag', $group->nid, $account);
    }
  }
}

/**
 * Implements hook_og_membership_delete().
 */
function flag_notify_og_membership_delete(OgMembership $og_membership) {
  if ($og_membership->entity_type != 'user') {
    // We want deal only with new users here, no content attached to a group.
    return;
  }
  // TODO: remove notification only for private groups.
  $account = user_load($og_membership->etid);
  $group = node_load($og_membership->gid);
  $group_subscription = config_get('flag_notify.settings', 'group_subscription');
  if ($group_subscription) {
    $flag = flag_get_flag($group_subscription);
    $flag->flag('unflag', $group->nid, $account);
  }
}


/**
 * Pick up the targeted users of the notification.
 *
 * This function selects the users to notify and calls flag_notify_fire_email()
 * with them.
 *
 * @param string $event
 *   Type of event issued, either 'new_comment', 'new_content',
 *   'edited_content' or 'new_user'.
 * @param array $groups
 *   Array of og groups to which the content belong to.
 * @param entity $node
 *   The content edited or with new comments.
 * @param entity $comment
 *   The comment sent (if any).
 * @param entity $user
 *   The comment or content author (new comment/content), acting user (edited
 *   content) or the new og user.
 */
function flag_notify_main($event, $groups, $node, $comment, $user) {
  $config = config('flag_notify.settings');

  // @see user_module_invoke()
  $break = False;
  $notifyActingUser = False;

  foreach (module_implements('flag_notify_event_alter') as $module) {
    $function = $module . '_flag_notify_event_alter';
    // Will call all modules implementing hook_hook_name
    // and can pass each argument as reference determined
    // by the function declaration.
    $function($break, $event, $groups, $node, $comment, $user, $notifyActingUser);
  }

  if ($break) {
    return;
  }

  // Lists of uids that will be notified.
  $users_comment = array();
  $users_content = array();
  $users_term = array();
  $users_group = array();

  $comment_subscription = $config->get('comment_subscription');
  $content_subscription = $config->get('content_subscription');
  $term_subscription = $config->get('term_subscription');
  $group_subscription = $config->get('group_subscription');

  // Check who has flagged the parent comments for reply notification.
  if ($comment_subscription && $event == 'new_comment') {
    $threads = explode('.', $comment->thread);
    $thread = "";
    $pnids = array();
    for ($i = 0; $i < (count($threads) - 1); $i++) {
      $thread .= $threads[$i];
      $local_thread = $thread . "/";
      $result = db_query(
        'SELECT c.cid FROM {comment} c WHERE c.nid = :nid AND c.thread = :thread AND c.status = :status',
        array(
        ':nid' => $comment->nid,
        ':thread' => $local_thread,
        ':status' => '1',
      )
      );
      foreach ($result as $record) {
        $pnids[] = $record->cid;
      }
      $thread .= ".";
    }
    foreach ($pnids as $pnid) {
      $users_comment_data = flag_get_entity_flags('comment', $pnid, $comment_subscription);
      foreach ($users_comment_data as $user_comment_data) {
        if (!array_key_exists($user_comment_data->uid, $users_comment)) {
          $users_comment[$user_comment_data->uid] = $user_comment_data->uid;
        }
      }
    }
  }

  // Check who has flagged the node for comment/edit notification.
  if ($content_subscription && $event != 'new_user') {
    $users_content_data = flag_get_entity_flags('node', $node->nid, $content_subscription);
    foreach ($users_content_data as $user_content_data) {
      if ((!array_key_exists($user_content_data->uid, $users_comment)) &&
          (!array_key_exists($user_content_data->uid, $users_content))) {
        $users_content[$user_content_data->uid] = $user_content_data->uid;
      }
    }
  }

  // Check who has flagged the term for content add/edit notification.
  if ($term_subscription && $event != 'new_user') {
    $term_flags = flag_get_flags('taxonomy_term');
    $vocabulary_name = $term_flags[$term_subscription]->types[0];
    $vocabulary_field = 'field_' . $vocabulary_name;
    $langcode = $node->langcode;
    $vocabtid = $vocabulary_name . '_tid';
    if (isset($node->$vocabtid)) {
      $tid = $node->$vocabtid;
      $users_term_data = flag_get_entity_flags('taxonomy_term', $tid, $term_subscription);
      foreach ($users_term_data as $user_term_data) {
        if ((!array_key_exists($user_term_data->uid, $users_comment)) &&
            (!array_key_exists($user_term_data->uid, $users_term))) {
          $users_term[$user_term_data->uid] = $user_term_data->uid;
        }
      }
    }
  }

  // Check who has flagged the og group for activities notifications.
  if ($group_subscription) {
    foreach ($groups as $group) {
      $users_group_data = flag_get_entity_flags('node', $group->nid, $group_subscription);
      foreach ($users_group_data as $user_group_data) {
        if ((!array_key_exists($user_group_data->uid, $users_comment)) &&
            (!array_key_exists($user_group_data->uid, $users_content)) &&
            (!array_key_exists($user_group_data->uid, $users_group))) {
          // Here we need also the group information for the email.
          $users_group[$user_group_data->uid] = $group;
        }
      }
    }
  }

  foreach ($users_comment as $user_comment) {
    if ($notifyActingUser || ($user->uid != $user_comment)) {
      flag_notify_fire_email($event, NULL, $node, $comment, $user, $user_comment, 'comment');
    }
  }
  foreach ($users_content as $user_content) {
    if ($notifyActingUser || ($user->uid != $user_content)) {
      flag_notify_fire_email($event, NULL, $node, $comment, $user, $user_content, 'content');
    }
  }
  foreach ($users_term as $user_term) {
    if ($notifyActingUser || ($user->uid != $user_term)) {
      flag_notify_fire_email($event, NULL, $node, $comment, $user, $user_term, 'term');
    }
  }
  foreach (array_keys($users_group) as $key) {
    if ($notifyActingUser || ($user->uid != $key)) {
      flag_notify_fire_email($event, $users_group[$key], $node, $comment, $user, $key, 'group');
    }
  }
}

/**
 * Implements the logic.
 *
 * Possible [notification-type] / [event-type] matches:
 * - comment - new_comment
 * - content - new_comment
 * - content - edited_content
 * - group - new_comment
 * - group - new_content
 * - group - edited_content
 * - group - new_users
 * - term - new_content
 * - term - edited_content
 *
 * @param string $event
 *   Type of event issued, either 'new_comment', 'new_content',
 *   'edited_content' or 'new_user'.
 * @param entity $group
 *   The og groups to which the content and the notified user belong to.
 * @param entity $node
 *   The content edited or with new comments.
 * @param entity $comment
 *   The comment sent (if any).
 * @param entity $user
 *   The comment or content author (new comment/content), acting user (edited
 *   content) or the new og user.
 * @param int $targetuser_uid
 *   The uid of the user to notify.
 * @param string $notification_type
 *   The reason this user is notified, either 'comment', 'content', 'term' or 'group'.
 */
function flag_notify_fire_email($event, $group, $node, $comment, $user, $targetuser_uid, $notification_type) {
  $config = config('flag_notify.settings');
  global $base_url;
  $suspend_notifications = $config->get('suspend_notifications');
  if ($suspend_notifications) {
    // Notifications are suspended.
    return;
  }

  $site_name = config_get('system.core', 'site_name');
  $site_email = config_get('system.core', 'site_mail');
  $salutation = $config->get('flag_notify_email_salutation');
  $tuser = user_load($targetuser_uid);
  $tuser_name = $tuser->name;
  $language = user_preferred_language($tuser);
  $acting_user = $GLOBALS['user'];
  //if ($acting_user->uid == $tuser->uid) {
//  // No need to send notification to the acting user!
//  return;
  //}

  if ($notification_type == 'comment') {
    $comment_subscription = $config->get('comment_subscription');
    $flag = flag_get_flag($comment_subscription);
    $cbody_field = field_get_items('comment', $comment, 'comment_body');
    $cbody = "";
    if (isset($cbody_field)) {
      $cbody = $cbody_field[0]['value'];
    }
    $content_title = $node->title;
    $content_body = backdrop_html_to_text($cbody);
    $content_url = $base_url . "/comment/" . $comment->cid . "#comment-" . $comment->cid;
    $content_unflag_text = $flag->unflag_short;
    $content_author = $user->name;
    $subject = $config->get('comment_email_subject');
    $body = $config->get('comment_email_body');
  }
  elseif ($notification_type == 'content') {
    $content_subscription = $config->get('content_subscription');
    $flag = flag_get_flag($content_subscription);
    $content_unflag_text = $flag->unflag_short;
    $content_title = $node->title;
    $content_author = $user->name;

    if ($event == 'new_comment') {
      $cbody_field = field_get_items('comment', $comment, 'comment_body');
      $cbody = "";
      if (isset($cbody_field)) {
        $cbody = $cbody_field[0]['value'];
      }
      $content_body = backdrop_html_to_text($cbody);
      $content_url = $base_url . "/comment/" . $comment->cid . "#comment-" . $comment->cid;
      $subject = $config->get('comment_email_subject');
      $body = $config->get('comment_email_body');
    }
    elseif ($event == 'edited_content') {
      $content_body = ''; // Insert node->body?
      $content_url = $base_url . '/' . backdrop_get_path_alias("node/" . $node->nid);
      $subject = $config->get('content_email_subject_edited');
      $body = $config->get('content_email_body_edited');
    }
    else {
      watchdog('flag_notify', 'An unknown event under the "content" notification type was requested.');
      return;
    }
  }
  elseif ($notification_type == 'term') {
    $term_subscription = $config->get('term_subscription');
    $flag = flag_get_flag($term_subscription);
    $content_unflag_text = $flag->unflag_short;
    $content_title = $node->title;
    $content_author = $user->name;
    $content_url = $base_url . '/' . backdrop_get_path_alias("node/" . $node->nid);
    if ($event == 'edited_content') {
      $content_body = ''; // Insert node->body?
      $subject = $config->get('content_email_subject_edited');
      $body = $config->get('content_email_body_edited');
    }
    elseif ($event == 'new_content') {
      $content_body = ''; // Insert node->body?
      $subject = $config->get('content_email_subject');
      $body = $config->get('content_email_body');
    }
    else {
      watchdog('flag_notify', 'An unknown event under the "term" notification type was requested.');
      return;
    }
  }
  elseif (module_exists('og') && $notification_type == 'group') {
    $group_subscription = $config->get('group_subscription');
    $flag = flag_get_flag($group_subscription);
    $content_unflag_text = $flag->unflag_short;
    $content_author = $user->name;
    $content_title = "[" . $group->title . "] ";
    if ($event == 'new_comment') {
      $cbody_field = field_get_items('comment', $comment, 'comment_body');
      $cbody = "";
      if (isset($cbody_field)) {
        $cbody = $cbody_field[0]['value'];
      }
      $content_body = backdrop_html_to_text($cbody);
      $content_url = $base_url . "/comment/" . $comment->cid . "#comment-" . $comment->cid;
      $content_title .= $node->title;
      $subject = $config->get('comment_email_subject');
      $body = $config->get('comment_email_body');
    }
    elseif ($event == 'edited_content') {
      $content_body = ''; // Insert node->body?
      $content_url = $base_url . '/' . backdrop_get_path_alias("node/" . $node->nid);
      $content_title .= $node->title;
      $subject = $config->get('content_email_subject_edited');
      $body = $config->get('content_email_body_edited');
    }
    elseif ($event == 'new_content') {
      $content_body = ''; // Insert node->body?
      $content_url = $base_url . '/' . backdrop_get_path_alias("node/" . $node->nid);
      $content_title .= $node->title;
      $subject = $config->get('content_email_subject');
      $body = $config->get('content_email_body');
    }
    elseif ($event == 'new_user') {
      $content_body = '';
      $content_url = $base_url . '/' . backdrop_get_path_alias("node/" . $group->nid);
      $content_title .= $user->name;
      $subject = $config->get('user_email_subject');
      $body = $config->get('user_email_body');
    }
    else {
      watchdog('flag_notify', 'An unknown event under the "group" notification type was requested.');
      return;
    }
  }
  else {
    watchdog('flag_notify', 'An unknown event notification type was requested.');
    return;
  }

  // @see user_module_invoke()
  $break = False;
  foreach (module_implements('flag_notify_message_alter') as $module) {
    $function = $module . '_flag_notify_message_alter';
    // will call all modules implementing hook_hook_name
    // and can pass each argument as reference determined
    // by the function declaration
    $function($break, $event, $group, $node, $comment, $user, $tuser, $notification_type, $subject, $body);
  }
  if ($break) {
    return;
  }

  $params = array();
  $search = array(
    '[site:name]',
    '[user:name]',
    '[content:title]',
    '[content:body]',
    '[content:url]',
    '[content:unflag]',
    '[content:author]',
  );
  $replace = array(
    $site_name,
    $tuser_name,
    $content_title,
    $content_body,
    $content_url,
    $content_unflag_text,
    $content_author,
  );
  $params['subject'] = str_replace($search, $replace, $subject);
  $params['body'] = str_replace($search, $replace, $body);

  $result = backdrop_mail('flag_notify', 'notification_email', $tuser->mail, $language, $params, $site_email, TRUE);

  if ($result['result'] != TRUE) {
    watchdog('flag_notify', 'There was a problem sending the notification and it was not sent.', NULL, WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_mail().
 */
function flag_notify_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}
